<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Distributed Thinking</title>
    <link>http://blog.droxer.me/</link>
    <description>Recent content on Distributed Thinking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Jan 2016 22:00:32 +0800</lastBuildDate>
    <atom:link href="http://blog.droxer.me/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Https Explanation</title>
      <link>http://blog.droxer.me/https_explanation/</link>
      <pubDate>Tue, 05 Jan 2016 22:00:32 +0800</pubDate>
      
      <guid>http://blog.droxer.me/https_explanation/</guid>
      <description>&lt;p&gt;最近在看关于网络安全的一些知识，顺便又回顾了一下https的工作原理，这里根据自己的理解总结梳理。&lt;/p&gt;

&lt;p&gt;首先，我们要知道https并不是一个新的协议，它是通过在http协议基础之上使用SSL／TLS，来保证client和sever之间的通过一个安全的SSL连接来完成通讯。主要的目的是两个：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;保证通讯对象是我们想要的，简单来说就是保证当你访问&lt;a href=&#34;https://www.google.com&#34;&gt;https://www.google.com&lt;/a&gt; 时，你访问的是真正的google还不是一个黑客给你准备假网站。&lt;/li&gt;
&lt;li&gt;保证通讯的内容的安全。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于https来说，第一步就是一个https连接的建立，也就是我们常说的协议握手。https连接建立的握手主要是三个阶段 - 协议协商, 证书交换，Key交换。这里我们以访问&lt;a href=&#34;https://example.com这样一个网站为例。&#34;&gt;https://example.com这样一个网站为例。&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;协议协商&lt;/strong&gt; - 整个握手开始于client发送一个ClientHello的消息给server，这个消息里包含了client支持SSL的版本，以及cipher suites。当server收到这个消息后会回复给client一个server hello的消息，这里面会制定通讯需要使用SSL版本和cipher suite。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;证书交换&lt;/strong&gt; - 完成了第一步，接下来server要做提供相应的identity来证明自己就是真的&lt;a href=&#34;https://example.com&#34;&gt;https://example.com&lt;/a&gt; 。Server会返回client一个SSL的证书，而在这个证书会指明证书的拥有者，相应的域名，以及证书的公钥，电子签名以及证书有效时间。而在client，我们浏览器会根据我们系统预装一个CAs（Certificate Authorities)来检查证书的有效性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Key交换&lt;/strong&gt; - 整个https的通讯是通过&lt;a href=&#34;https://en.wikipedia.org/wiki/Symmetric-key_algorithm&#34;&gt;对称加密算法&lt;/a&gt;来完成的，这也就是说client和server端要统一使用一个key来对通讯进行加密。而对于&lt;a href=&#34;https://en.wikipedia.org/wiki/Symmetric-key_algorithm&#34;&gt;对称加密算法&lt;/a&gt;来说key就是关键，因为如果有人知道了你的key和加密使用的cipher suite就可以解密你的通讯内容。而在key交换这个环节，为了保证key交换的安全，https使用&lt;a href=&#34;https://en.wikipedia.org/wiki/Public-key_cryptography&#34;&gt;非对称加密算法&lt;/a&gt;。client会随机生成一个key，然后使用我们在第二步中拿到的证书中的公钥对key进行加密，然后发送给server。server会使用这个公钥对应的密钥解密然后拿到key。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;完成了上面三步，https连接就算好了。接下来client和server会使用他们在握手阶段达成了一致，使用相应SSL和cipher suite以及key对发送的请求加密，接受端再使用他们对请求进行解密。&lt;/p&gt;

&lt;p&gt;接下来，我们可以来看看整个连接建立过程中最重要的一个东西SSL证书。&lt;/p&gt;

&lt;p&gt;本质上说SSL证书就是一个文本文件，任何人都可以打开并且修改，甚至创建一个。那么我们怎么来确认证书的有效性呢？&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;SSL证书的发放和申请都来自是由非常权威的CAs（Certificate Authorities)，在证书的申请过程中我们需要提供相应的证据来证明我们拥有example.com这个域名。&lt;/li&gt;
&lt;li&gt;对于client，我们的浏览器本身就已经预装了一些权威CAs，如果你的证书是由这些CAs发放的，我们浏览器上的CA就会检查证书上的电子签名。这个电子签名是信息是使用我们申请证书时候提供的私钥加密的，而这里浏览器上的CAs只需要使用证书中提供的公钥就行解密就可以验证电子签名的有效性了。由于私钥的保存非常安全，其他人是拿不到的，所以无法伪造这个签名。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;切记，https并不是绝对安全的，依然会面临很多威胁。比如&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Downgrade_attack&#34;&gt;protocol downgrade attack&lt;/a&gt;，我们需要&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security&#34;&gt;HSTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果我们在使用公司的网络时候，如果我们的计算机可以别人访问，他大可以在你的计算机中偷偷的安装他的CA，然后拦截你所有https的请求。&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后，使用https一定要注意证书的有效时间，防止证书过期。或者我们直接使用任何&lt;a href=&#34;https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment&#34;&gt;ACME&lt;/a&gt;的客户端，比如&lt;a href=&#34;https://en.wikipedia.org/wiki/Let%27s_Encrypt&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;来帮助我们自动renew证书。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Do the Right Things</title>
      <link>http://blog.droxer.me/do_the_right_things/</link>
      <pubDate>Thu, 31 Dec 2015 22:51:09 +0800</pubDate>
      
      <guid>http://blog.droxer.me/do_the_right_things/</guid>
      <description>

&lt;p&gt;2015马上就要过去了，也到了公司一年一次的annual review的时候了。自己也需要和自己的sponsee们一起聊聊他们过去的一年，按照往年的模式，我们的回顾主要集中在下面三个方面：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;那些地方做得不错，可以继续保持。&lt;/li&gt;
&lt;li&gt;那些地方做的不太好，新的一年要改善。&lt;/li&gt;
&lt;li&gt;新的一年有什么计划，同时作为sponsor我自己也要给出自己的建议。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而今年的时候，在这个过程中，我加入了下面两个维度的回顾：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;那些事情在过去一年占用了我们大量的时间，但又不是我们的兴趣所在。&lt;/li&gt;
&lt;li&gt;那些事情，本身就是我们最大的兴趣所在，但我们投入的精力却不够。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而这两个维度，很大程度上也是在说给自己。2016年自己就是30+了，自己的时间和精力肯定相比于20多会有很大的下降，而与此同时儿子的降临让自己非常激动，但客观上，自己也会花更多的精力在儿子身上。自己对于自己成长的需求自然也不会降低，那么对于我自己来说非常重要就是do the right things.&lt;/p&gt;

&lt;h2 id=&#34;什么是do-the-right-things:57a6d2d5e8cc0252f935ad15dcbc47e7&#34;&gt;什么是Do the right things&lt;/h2&gt;

&lt;p&gt;right things就是对我们自己有价值的事情，其次是对于我们周围的人有价值的事情。下面的这些，都是自己在过去的几年做过的很多花费了自己很大精力，在未来自己想尽力避免的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当我们被邀请参加一个会议时，我们需要想想到底自己的参加有没有意义，如果没有不要参加。&lt;/li&gt;
&lt;li&gt;当办公室里有人要讲一个“xxx”培训或者session，问问自己这个是自己感兴趣的吗，然后再考虑是否参加。&lt;/li&gt;
&lt;li&gt;但被要求做一件事情时候，先自己喜不喜欢，有没有兴趣。如果没有请当面说不，不要为了讨好别人或者介于别人的面子来做自己不喜欢的事情，因为注定我们无法全心投入这件事情。&lt;/li&gt;
&lt;li&gt;当拿到客户的一个需求，多问几个为什么，了解了需求的价值，然后再去执行。不然对于客户来说你只是一个“工具”&lt;/li&gt;
&lt;li&gt;但听到一些新的技术，先静下来了解新技术的价值。炫酷并不一定有价值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但很多事情也不是自己刚开始就意识到的，尤其是在自己刚开始入行的时候。如果没有这些不断尝试，也许并不会知道自己真正的兴趣所在，甚至可能会把自己限制住。也许你已经困惑了，到底这些事情有没有价值呢？是不是right things呢？&lt;/p&gt;

&lt;p&gt;我是这样告诉我的sponsee们的，如果你还没有找到自己的兴趣，那么open mind，多尝试；如果你已经找到了，更加专注。&lt;/p&gt;

&lt;p&gt;最后还是想说给自己的2016一些，多读书，多思考，更加有计划和执行力。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>理解Reactive Functional Programming</title>
      <link>http://blog.droxer.me/understanding_reactive_functional_programming/</link>
      <pubDate>Sat, 26 Dec 2015 21:18:04 +0800</pubDate>
      
      <guid>http://blog.droxer.me/understanding_reactive_functional_programming/</guid>
      <description>

&lt;p&gt;自己在学习了解reactive functional programming的过程中，看了很多文章，视频，阅读了一些现有实现的源代码，甚至是自己去尝试实现一个简单的&lt;a href=&#34;https://github.com/droxer/RxGo/&#34; title=&#34;RxGo&#34;&gt;reactive框架&lt;/a&gt;。而在这些之后才对reactive funcational programming有一个一点点肤浅的理解。&lt;/p&gt;

&lt;p&gt;学习过程中，按照自己以往的习惯，我先去&lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_reactive_programming/&#34; title=&#34;wikipidea&#34;&gt;wikipedia&lt;/a&gt;，想要对这个东西有一个初步的理解，明白它是什么东西，解决什么问题。而&lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_reactive_programming/&#34; title=&#34;wikipidea&#34;&gt;wikipedia&lt;/a&gt;上面的第一句话是&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Functional reactive programming (FRP) is a programming paradigm for reactive programming (asynchronous dataflow programming) using the building blocks of functional programming (e.g. map, reduce, filter).&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当时自己看到这个时，觉得这个描述过于抽象。自己一下子根本无法理解，但实际上当自己看完大量的文章视频之后，发现这个真的才是最准确的定义。&lt;/p&gt;

&lt;h2 id=&#34;asynchronous-dataflow-programming:2b8e6972a732d10b5a0c8b16d42b4f7f&#34;&gt;asynchronous dataflow programming&lt;/h2&gt;

&lt;p&gt;dataflow可以是web应用中页面上用户的点击，系统中的一个个事件，包括用户的一个输入，对一个list的迭代等等。asynchronous dataflow programming是说，我们会异步的方式捕捉这些数据流，并在某些特定值或者满足某些特定条件的情况下执行相应的操作。这非常类似我们在设计模式中&lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern/&#34; title=&#34;observer pattern&#34;&gt;观察者模式&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;
    &lt;code&gt;
c 代表鼠标的单击
---&gt; 代表时间线

--c----c-c----c---c----&gt;
    &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&#34;reactive-functional-programming:2b8e6972a732d10b5a0c8b16d42b4f7f&#34;&gt;reactive functional programming&lt;/h2&gt;

&lt;p&gt;根据&lt;a href=&#34;https://github.com/droxer/RxGo/&#34; title=&#34;RxGo&#34;&gt;wiki&lt;/a&gt;的定义，是我们使用一些函数式编程中的方法对来操作这些asynchronous dataflow。：&lt;/p&gt;

&lt;pre&gt;
    &lt;code&gt;
鼠标的点击事件流:
               ---c----cc--c----ccc----c--&gt;

               bufer(clickStream.throttle(250ms))

               --1c----2c---1c---3c---1c---&gt;

               map(e.length)

               ---1-----2----1----3----1---&gt;

               filter(x &gt;= 2)

               ---------2---------2---------&gt;
    &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;在上图，我们看到一个鼠标点击的asynchronous dataflow。首先，我们计算出每250ms的鼠标点击次数，然后使用map函数影射出每250ms内鼠标的点击次数，最后filter出两次以上的点击。最后我们可以根据我们最后的结果来执行相应的操作，比如说我们认为只有这样过滤出来的鼠标点击，我们认为是一次用户的双击操作。&lt;/p&gt;

&lt;p&gt;上面是我对于Reactive Functional Programming一个非常粗浅的理解。如果大家想了解细节更多可以看看这个视频&lt;a href=&#34;http://www.infoq.com/presentations/Netflix-API-rxjava-hystrix&#34;&gt;Functional Reactive Programming in the Netflix API&lt;/a&gt;，另外&lt;a href=&#34;https://github.com/ReactiveX&#34;&gt;ReactiveX&lt;/a&gt;里有很多不同语言上对于Reactive Functional Programming的实现。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>你的技术热情在哪里?</title>
      <link>http://blog.droxer.me/enthusiastic_on_programming/</link>
      <pubDate>Wed, 28 Oct 2015 23:34:00 +0800</pubDate>
      
      <guid>http://blog.droxer.me/enthusiastic_on_programming/</guid>
      <description>&lt;p&gt;最近一两年参加了很多的面试，技术热情作为 &lt;a href=&#34;http://www.thoughtworks.com/&#34;&gt;ThoughtWorks&lt;/a&gt; 技术文化最重要的组成部分，也成为了我们面试时候衡量一个人非常中重要的一个因素。&lt;/p&gt;

&lt;p&gt;在我面试过所有人中不管是工作过一两年的程序员，还是有十几年工作经验的“架构师”，当我问到这个问题的时候，其中很大一部分的人都表示自己对技术充满的热情，非常喜欢写程序。一般情况，我会用下面的问题来做一个简单的验证：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;你平时会读开源代码吗？&lt;/li&gt;
&lt;li&gt;你工作的8小时之外，会再花时间写代码吗？&lt;/li&gt;
&lt;li&gt;你们是关注新技术吗？&lt;/li&gt;
&lt;li&gt;给我介绍一个你自己非常精通的技术&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;答案很多时候并不是能让人满意。而原因，一般都是下面几条：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;现在的公司加班非常严重，我每天会回到家已经很晚了，没时间。&lt;/li&gt;
&lt;li&gt;现在的公司技术气氛不好，我周围没有牛人&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而往往这种情况下，我看到结果也通常是候选人的技术基础比较浅，技术视野狭窄。&lt;/p&gt;

&lt;p&gt;大学时候，我有一个同学非常喜欢魔兽世界，他可以在五一，十一这种假期完全泡在网吧里打魔兽。这在我这样一个对电子游戏不感冒的人来看是非常不能理解的，但是他却可以乐在其中，不能自拨，我觉得这就是热情。对一件事情的热情，来源于我们能真正享受其中难以外人描述的乐趣。当我的朋友向别人描述我是一个工作狂时，我一般都不会反对，也不会解释。因为我自己知道的自己狂热是因为我在我做自己感兴趣的事情，而且这些是我无法解释给他的。&lt;/p&gt;

&lt;p&gt;让我再来看看这两个“原因”:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;没有时间&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我有一位我非常钦佩的比我年长一些同事，他是一个非常好的父亲，每天回家都要陪他儿子玩，一直玩到儿子睡了，差不多快12点了。但这个时候他还是会看看或谢谢代码差不多到1点多的时候。我还有一个非常年轻的同事，告诉他晚上经常写程序会写的非常兴奋，然后就是一个通宵。而在他们身上我看到是真正对编程的热爱，真正的技术热情。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;周围没有牛人&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先，我必须承认有技术牛人在周围，确实会对你的技术提高会有帮助。但这并不是一个充分条件，在今天这样一个互联网的时代，你可以到处找到技术牛人。在github上看别人的代码，订阅Netfilix/google/twitter/facebook/linkin Engineer的文章，去slideshare/deck看别人的slide，这些都可以帮助到你。我身边也有这样的技术牛人，而对我自己来说，他们真正影响到我的是他们对技术的热情，精益求精的态度。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://blog.droxer.me/contact/</link>
      <pubDate>Sun, 09 Nov 2014 13:49:44 +0400</pubDate>
      
      <guid>http://blog.droxer.me/contact/</guid>
      <description>&lt;p&gt;He Fei&lt;/p&gt;

&lt;p&gt;Lead Consultant, Architect @&lt;a href=&#34;http://www.thoughtworks.com/&#34;&gt;ThoughtWorks&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Email: &lt;a href=&#34;mailto:droxer.he@gmail.com&#34;&gt;droxer.he@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linkedin: &lt;a href=&#34;https://www.linkedin.com/in/droxer&#34;&gt;https://www.linkedin.com/in/droxer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://blog.droxer.me/about/</link>
      <pubDate>Sat, 08 Nov 2014 16:42:18 +0400</pubDate>
      
      <guid>http://blog.droxer.me/about/</guid>
      <description>&lt;p&gt;He Fei&lt;/p&gt;

&lt;p&gt;Lead Consultant, Architect @&lt;a href=&#34;http://www.thoughtworks.com/&#34;&gt;ThoughtWorks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He is leading team help customer delivery software project including architecture design, development, deployment and maintenance in different technical stack like J2EE, .Net, Ruby on Rails, python etc. He is mainly focused on architecture design, distributed system/storage, cloud computing and big data. And also he was invited to join CD Conference, &lt;a href=&#34;http://www.infoq.com/cn&#34;&gt;InfoQ&lt;/a&gt; as speaker.&lt;/p&gt;

&lt;p&gt;In no particular order, these are things that interest me and that I spend an unhealthy amount of time with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Distributed System&lt;/li&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;Bigdata&lt;/li&gt;
&lt;li&gt;DevOps&lt;/li&gt;
&lt;li&gt;Architecture Design&lt;/li&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;github: &lt;a href=&#34;https://github.com/droxer&#34;&gt;github.com/droxer&lt;/a&gt;
email: &lt;a href=&#34;mailto:droxer.he@gmail.com&#34;&gt;droxer.he@gmail.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>